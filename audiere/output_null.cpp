#include "output_null.hpp"


////////////////////////////////////////////////////////////////////////////////

bool
NullOutputContext::Initialize(const char* /*parameters*/)
{
  return true;
}

////////////////////////////////////////////////////////////////////////////////

void
NullOutputContext::Update()
{
}

////////////////////////////////////////////////////////////////////////////////

IOutputStream*
NullOutputContext::OpenStream(
  int channel_count,
  int sample_rate,
  int bits_per_sample,
  ADR_SAMPLE_SOURCE source,
  ADR_SAMPLE_RESET reset,
  void* opaque)
{
  return new NullOutputStream();
}

////////////////////////////////////////////////////////////////////////////////

NullOutputStream::NullOutputStream()
: m_volume(ADR_VOLUME_MAX)
{
}

////////////////////////////////////////////////////////////////////////////////

void
NullOutputStream::Play()
{
}

////////////////////////////////////////////////////////////////////////////////

void
NullOutputStream::Stop()
{
}

////////////////////////////////////////////////////////////////////////////////

void
NullOutputStream::Reset()
{
}

////////////////////////////////////////////////////////////////////////////////

bool
NullOutputStream::IsPlaying()
{
  return false;
}

////////////////////////////////////////////////////////////////////////////////

void
NullOutputStream::SetVolume(int volume)
{
  if (volume < ADR_VOLUME_MIN) {
    volume = ADR_VOLUME_MIN;
  } else if (volume > ADR_VOLUME_MAX) {
    volume = ADR_VOLUME_MAX;
  }

  m_volume = volume;
}

////////////////////////////////////////////////////////////////////////////////

int
NullOutputStream::GetVolume()
{
  return m_volume;
}

////////////////////////////////////////////////////////////////////////////////
